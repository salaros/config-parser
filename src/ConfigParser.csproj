<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>
        <OutputPath>..\bin\$(Configuration)\</OutputPath>
        <LangVersion>latest</LangVersion>
        <RootNamespace>Salaros.Configuration</RootNamespace>
        <AssemblyName>ConfigParser</AssemblyName>
    </PropertyGroup>

    <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackOnBuild>true</PackOnBuild>
        <PackageId>Salaros.ConfigParser</PackageId>
        <Product>ConfigParser</Product>
        <Company>Salaros</Company>
        <Authors>Zhmayev Yaroslav aka Salaros</Authors>
        <Copyright>Copyright 2015 (c) Salaros</Copyright>
        <Title>ConfigParser</Title>
        <Description>A slim, cross-platform, fully managed C# library for reading/writing .ini, .conf, .cfg etc configuration files.</Description>
        <Version>0.3.7</Version>
        <AssemblyVersion>0.3.7</AssemblyVersion>
        <FileVersion>0.3.7</FileVersion>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <PackageLicenseUrl>https://raw.githubusercontent.com/salaros/config-parser/master/LICENSE</PackageLicenseUrl>
        <PackageProjectUrl>https://github.com/salaros/config-parser</PackageProjectUrl>
        <RepositoryUrl>https://github.com/salaros/config-parser</RepositoryUrl>
        <RepositoryType>Git</RepositoryType>
        <PackageTags>configuration,configuration-files,file,configuration-file,config,ini,cfg,configs,conf,mono,dotnet,managed,csharp,cross-platform</PackageTags>
        <NeutralLanguage>English</NeutralLanguage>
        <PackageReleaseNotes></PackageReleaseNotes>
    </PropertyGroup>

    <!-- A workaround for "full" .NET Framework targets to try to fallback on Mono before failing -->
    <PropertyGroup Condition="'$(OS)' != 'Windows_NT' And $(TargetFramework.StartsWith('net'))">
        <!-- Look up for Mono installations on Linux or macOS -->
        <MonoPath Condition="'$(MonoPath)' == '' And Exists('/usr/lib/mono')">/usr/lib/mono</MonoPath>
        <MonoPath Condition="'$(MonoPath)' == '' And Exists('/Library/Frameworks/Mono.framework/Versions/Current/lib/mono')">/Library/Frameworks/Mono.framework/Versions/Current/lib/mono</MonoPath>
        <!-- Try to apply framework override for supported targets if Mono was found -->
        <FrameworkPathOverride Condition="'$(MonoPath)' != '' And '$(TargetFramework)' == 'net40'">$(MonoPath)/4.0-api</FrameworkPathOverride>
        <FrameworkPathOverride Condition="'$(MonoPath)' != '' And '$(TargetFramework)' == 'net45'">$(MonoPath)/4.5-api</FrameworkPathOverride>
    </PropertyGroup>

    <ItemGroup>
      <None Remove="ConfigParser.csproj.DotSettings" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CSharp" Version="4.7.0" Condition="'$(TargetFramework)' != 'net40'" />
        <Reference Include="Microsoft.CSharp" Version="4.0.0" Condition="'$(TargetFramework)' == 'net40'" />
    </ItemGroup>

    <PropertyGroup Condition="'$(Configuration)' == 'Release'">
        <DefineConstants>TRACE;LIBLOG_PUBLIC</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
        <DefineConstants>TRACE;DEBUG;LIBLOG_PUBLIC</DefineConstants>
        <DebugType>full</DebugType>
    </PropertyGroup>

    <Target Name="CleanNuGetFiles" AfterTargets="Clean">
        <ItemGroup>
            <NuGetFilesBin Include="$(OutputPath)\..\*.nupkg" />
        </ItemGroup>
        <Message Text="Deleting NuGet files from $(OutputPath)\..\*.nupkg" Importance="high" />
        <Delete Files="@(NuGetFilesBin)" />
        <Delete Files="@(NuGetFilesProject)" />
    </Target>

</Project>
